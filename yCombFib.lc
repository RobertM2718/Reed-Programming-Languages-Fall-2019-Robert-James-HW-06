zero := fn f => fn a => a;

succ := fn n => fn f => fn a => f (n f a);

one := succ zero;

two := succ one;

three := succ two;

plus := fn n => fn m => n succ m;

true := fn x => fn y => x;

false := fn x => fn y => y;

fst := fn p => p true;

snd := fn p => p false;

pair := fn x => fn y => fn z => z x y;

delay := fn op => fn p => pair true ((fst p) (op (snd p)) (snd p));

delayCount := delay succ;

pred := fn n => snd (n delayCount (pair false zero));

equalZero := fn n => n (fn x => false) true;

Y_Comb := fn g => (fn z => (z z)) (fn x => g (x x));

fibYTemplate := fn f => fn n => (equalZero n) one 
                                    ((equalZero (pred n)) one 
                                        (plus (f (pred n)) ( f (two pred n))));

fibY := fn n => Y_Comb fibYTemplate (pred n);

main := fibY three;

