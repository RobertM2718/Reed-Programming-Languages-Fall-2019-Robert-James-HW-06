zero := fn f => fn a => a;

succ := fn n => fn f => fn a => f (n f a);

one := succ zero;

two := succ one;

three := succ two;

plus := fn n => fn m => n succ m;

true := fn x => fn y => x;

false := fn x => fn y => y;

not := fn b => b false true;

fst := fn p => p true;

snd := fn p => p false;

pair := fn x => fn y => fn z => z x y;

delay := fn op => fn p => pair true ((fst p) (op (snd p)) (snd p));

delayCount := delay succ;

pred := fn n => snd (n delayCount (pair false zero));

minus := fn n => fn m => m pred n;

and := fn x => fn y => x (y true false) false;

equalZero := fn n => n (fn x => false) true;

less := fn n => fn m => and (equalZero (minus n m)) (not (equalZero (minus m n)));

main := less three three;

